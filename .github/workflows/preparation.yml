name: CPP Game Engine preparation

on:
  pull_request:
    branches: [ "master", "release_**" ]

jobs:
  build_debug_for_windows:
    name: Build Debug Binary for Windows
    runs-on: windows-latest

    steps:
      - name: Preparing git branch
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install CMake
        uses: ssrobins/install-cmake@v1
        with:
          version: 3.30.1

      - name: Build binary
        run: ./build_windows_debug.bat

      - name: Success result
        if: ${{ success() }}
        shell: bash
        run: |
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data '{"text":"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nBuild: Success \u2705\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Windows DEBUG Project was built successfully"}'

      - name: Failure result
        if: ${{ failure() }}
        shell: bash
        run: |
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data '{"text":"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nBuild: Failed \u274C\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Windows DEBUG Project build error"}'

  build_release_for_windows:
    name: Build Release Binary for Windows
    runs-on: windows-latest

    steps:
      - name: Preparing git branch
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install CMake
        uses: ssrobins/install-cmake@v1
        with:
          version: 3.30.1

      - name: Build binary
        run: ./build_windows_release.bat

      - name: Success result
        if: ${{ success() }}
        shell: bash
        run: |
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data '{"text":"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nBuild: Success \u2705\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Windows RELEASE Project was built successfully"}'

      - name: Failure result
        if: ${{ failure() }}
        shell: bash
        run: |
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data '{"text":"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nBuild: Failed \u274C\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Windows RELEASE Project build error"}'

  build_for_browser:
    name: Build Binary for Browser
    runs-on: windows-latest

    steps:
      - name: Preparing git branch
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install CMake
        uses: ssrobins/install-cmake@v1
        with:
          version: 3.30.1

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@v14

      - name: Build binary
        run: ./build_browser.ps1

      - name: Extend Assembly
        run: ./extend_web_assembly.ps1

      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-sandbox
          path: ./build/bin/
      
      - name: Success result
        if: ${{ success() }}
        shell: bash
        run: |
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data '{"text":"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nBuild: Success \u2705\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Web Project was built successfully. Web artifact available here: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}'

      - name: Failure result
        if: ${{ failure() }}
        shell: bash
        run: |
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data '{"text":"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nBuild: Failed \u274C\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Web Project build error"}'

  deploy_artifact_for_browser:
    name: Deploy Artifact for Browser
    runs-on: ubuntu-latest
    needs: build_for_browser
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: web-sandbox
          path: ./

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Run Python server
        run: |
          python server.py &
          sleep 10

      - name: Check server status
        run: |
          echo "Checking if the server is running..."
          netstat -tuln | grep ':8000' || echo "Server is not running on port 8000"

      - name: Install ngrok using official method
        run: |
          curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
            && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list \
            && sudo apt update \
            && sudo apt install -y ngrok

      - name: Install ngrok
        run: |
          curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
            && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list \
            && sudo apt update \
            && sudo apt install -y ngrok

      - name: Start Public tunnel
        run: |
          echo "Public tunnel starting..."
          ngrok config add-authtoken ${{secrets.NGROK_TOKEN}}
          #nohup ngrok http 8000 > public_url.log 2>&1 &
          nohup ngrok http 8000 > public_url.log 2>&1 &
          sleep 30
          sudo apt install -y jq
          PUBLIC_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo $PUBLIC_URL > public_url.txt

      - name: Display Public URL
        run: cat public_url.txt

      - name: Send Public URL
        shell: bash
        run: |
          PUBLIC_URL=$(cat public_url.txt)
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data "{\"text\":\"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nServer: Runned \u23F3\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Test host available 15 min: $PUBLIC_URL\"}"

      - name: Keep Job Alive
        run: |
          echo "Keeping job alive. Access your server at the URL above."
          sleep 900

      - name: Success result
        if: ${{ success() }}
        shell: bash
        run: |
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data '{"text":"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nServer: Stopped \u26D4\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Test host now unavailable"}'

      - name: Failure result
        if: ${{ failure() }}
        shell: bash
        run: |
          curl \
            -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage?chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            --header "Content-Type:application/json" \
            --data '{"text":"Project: cpp-game-engine\nBranch: ${{github.head_ref}}\nServer: Not runned \u26D4\nTriggered by: ${{github.event.pull_request.user.login}}\nMessage: Test host unavailable"}'
